version: 0.2

phases:
  pre_build:
    commands:
      - echo Starting MySQL Docker container...
      - docker run --name mysql-container -e MYSQL_ROOT_PASSWORD=${TEST_DB_ROOT_PASSWORD} -e MYSQL_DATABASE=${TEST_DB_NAME} -p 3306:3306 -d mysql:5.7 --character-set-server=utf8 --collation-server=utf8_unicode_ci
      - echo Waiting for MySQL to start...
      - echo Checking MySQL status...
      - until docker exec mysql-container mysqladmin ping --host=127.0.0.1 --user=root --password=${TEST_DB_ROOT_PASSWORD} --silent; do echo waiting for mysql; sleep 3; done
      - echo MySQL is up and running

      - echo Starting Redis Docker container...
      - docker run -d --name redis-container -p 6379:6379 redis:latest
      - echo Waiting for Redis to start...
      - until docker exec redis-container redis-cli ping | grep PONG; do echo waiting for redis; sleep 3; done
      - echo Redis is up and running

      - echo Logging in to Amazon ECR...
      - aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${DEFAULT_IMAGE_REPOSITORY_URI}
      - IMAGE_TAG=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
  build:
    commands:
      - echo Build started on `date`
      - echo Compiling the Gradle project...
      - ./gradlew clean build -PspringProfile=cloud
      - echo Building the Docker image...
      - docker build -t $IMAGE_REPOSITORY_URI:latest .
      - docker tag $IMAGE_REPOSITORY_URI:latest $IMAGE_REPOSITORY_URI:$IMAGE_TAG
  post_build:
    commands:
      - echo Build completed on `date`
      - echo Stopping MySQL Docker container...
      - docker stop mysql-container
      - echo Removing MySQL Docker container...
      - docker rm mysql-container
      - echo Pushing the Docker images...
      - docker push $IMAGE_REPOSITORY_URI:latest
      - docker push $IMAGE_REPOSITORY_URI:$IMAGE_TAG
artifacts:
  files:
    - '**/*'
